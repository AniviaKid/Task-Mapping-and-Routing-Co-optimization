mapping的reward更好的定义：
按执行顺序来分，优先给在前面的更快的PE？



如何在GEM5中仿真异构NoC？是通过json文件里我来指定exe_time来确定的吗
是的，比如把所有task的exe_time除以一个倍数，这样就表示在不同执行能力上的PE的实现

然后传输数据的运行时间，就是通过total_needsend来体现出来的吗？任务图里边的执行时间是什么
任务图里的执行时间是待发送的message的size

exe_time total_needsend这些值要怎么确定





routing：
每一步没有争用，reward+1，要等待的话等待时间越长减的越多

这样就要手动维护每条通信链路的start time 和end time（这样做得到吗？）

对边按照怎样的顺序来进行RL学习？广度优先？还是按task的入度排序，然后按这个顺序处理节点的出边？

给定边的顺序之后，按这个顺序对每条边进行RL，这样还是需要知道哪个通信链路现在有没有被占用，所以还是要去维护start/end time？因为用RL的话，执行完一个action是需要一个即时的反馈来得到当前环境的reward