
import math
import random

#import gym  
import numpy as np
import time
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.distributions import Categorical

import matplotlib.pyplot as plt
import time
from libs import init,Get_full_route_by_XY,Environment,check_if_Done,Critic,Get_detailed_data,Get_rand_computation_ability2,Get_mapping_exe_time,computeContention,Get_link_index_by_route,Update_link_set
from queue import Queue

import datetime
from routing import improved_routeCompute
#from MyOnlineCompute import onlineTimeline

"""
task_graph={"1": {"total_needSend": 3, "out_links": [["2", 2, [], 0, 0, -1], ["3", 1, [[0, "S"]], 1, 2, 1]], "total_needReceive": 0, "exe_time": 1}, "2": {"total_needSend": 7, "out_links": [["4", 3, [[0, "E"]], 4, 7, 2], ["5", 4, [], 0, 0, -1]], "total_needReceive": 2, "exe_time": 3}, "3": {"total_needSend": 2, "out_links": [["6", 2, [], 0, 0, -1]], "total_needReceive": 1, "exe_time": 2}, "4": {"total_needSend": 2, "out_links": [["7", 2, [], 0, 0, -1]], "total_needReceive": 3, "exe_time": 5}, "5": {"total_needSend": 2, "out_links": [["7", 2, [[0, "E"]], 6, 8, 3]], "total_needReceive": 4, "exe_time": 2}, "6": {"total_needSend": 1, "out_links": [["7", 1, [[2, "N"], [0, "E"]], 6, 7, 4]], "total_needReceive": 2, "exe_time": 4}, "7": {"total_needSend": 0, "out_links": [], "total_needReceive": 5, "exe_time": 1}}
"""

class link_item():#可以根据在list中的下标索引到它连接的是哪两个PE
    def __init__(self):
        #记录这个link的timeline，list中的每个元素是list，形式为[task_source,task_dest,start_time,end_time]
        self.timeline=[]

MapResult=[-1,5,11,3,15]
num_of_rows=4


tmp=np.array([[233,106,355,134,245,309,315,566,292,419,440,394,294,193
,345,165,347,362,450,316,563,633,398,327,277,229,258,523
,479,97,199,822,212,130,207,391,541,161,325,126,292,814
,410,278,385,233,608,244,341,252,353,343,468,388,545,229
,366,201,182,790,129,421,499,166]
,[1101,1470,640,922,729,2334,614,3959,2315,4217,527,3384,1909,694
,1075,1361,1344,2049,3241,1818,1616,1843,1047,784,1896,5197,2403,814
,2769,1815,522,2038,2087,637,3362,2207,895,1340,1383,1610,1439,1409
,3189,5185,1309,3959,1073,3006,715,1285,1289,1348,2011,2163,1543,1229
,1635,3860,1480,4143,1725,1048,1015,2709]
,[579,352,1074,591,1319,297,504,328,980,432,956,306,571,273
,410,1282,627,959,493,431,653,686,909,494,270,700,683,1488
,510,793,786,555,294,344,469,312,972,167,569,1509,1349,972
,284,702,245,473,417,325,375,298,419,632,986,778,1087,323
,1334,657,1147,541,182,692,296,463]
,[31,91,53,16,40,60,73,51,45,33,9,148,45,130
,101,64,35,98,59,39,19,46,78,71,56,46,61,62
,61,75,129,70,106,24,113,17,52,14,54,117,77,79
,68,32,48,113,70,113,77,74,94,89,153,38,14,51
,81,104,35,42,52,48,101,68]
,[37,29,51,43,41,35,66,26,82,68,46,47,84,22
,83,36,41,54,12,69,24,33,66,43,38,86,73,30
,96,28,90,50,33,29,44,84,75,28,46,54,29,28
,32,52,37,43,27,57,63,41,18,115,40,9,33,22
,34,21,64,32,46,63,77,46]
,[574,405,813,563,632,562,1025,284,427,434,681,294,779,581
,207,404,630,313,291,494,1350,795,217,754,369,753,751,512
,813,1687,300,523,752,131,504,849,325,543,682,534,757,1626
,221,209,358,447,249,716,381,781,424,323,214,298,517,514
,915,605,626,1087,218,301,605,144]
,[759,518,677,428,507,597,569,526,536,247,653,441,923,702
,308,219,620,317,361,297,495,806,741,642,709,983,499,742
,549,344,475,194,175,318,496,846,193,659,364,371,1104,321
,405,527,314,242,505,913,124,161,377,698,494,929,370,275
,207,689,523,1001,856,441,321,372]
,[137,431,622,881,698,725,187,399,172,573,541,226,539,303
,615,405,181,1241,642,205,761,693,570,367,818,380,1470,566
,237,934,610,222,367,496,337,549,1023,309,731,539,510,307
,150,547,387,689,572,776,1016,743,315,104,512,463,456,662
,405,508,103,361,776,125,543,242]
,[576,530,966,137,472,171,484,1296,712,379,385,236,223,833
,428,575,1066,614,789,626,514,570,1274,724,1017,660,389,458
,453,409,854,307,910,360,312,995,516,1118,939,532,625,219
,454,239,677,784,255,714,175,620,849,373,557,239,395,726
,136,453,312,287,703,403,720,953]
,[436,366,973,169,271,375,634,604,456,933,607,93,718,683
,574,431,1023,846,169,557,786,334,443,542,966,572,434,952
,489,1123,441,466,323,536,652,451,366,851,190,488,519,581
,667,825,631,491,295,427,890,627,229,790,217,372,412,846
,850,609,787,459,237,393,245,1140]
,[96,439,544,192,485,399,388,432,76,556,682,333,421,315
,379,199,177,589,234,554,642,389,199,1049,573,703,343,293
,552,492,252,971,321,260,318,785,992,84,788,588,601,308
,449,405,494,324,538,603,846,199,190,688,259,106,361,517
,568,670,365,282,636,483,255,306]
,[727,571,381,466,662,680,318,373,720,418,1202,447,624,384
,308,449,191,454,590,603,431,93,348,405,595,747,421,519
,267,219,313,982,610,434,627,145,287,752,515,203,269,173
,204,406,481,745,323,395,390,742,635,376,580,1318,174,454
,304,256,370,243,707,551,453,244]])
print(tmp)
print(tmp.shape)
"""
link_set=[]
total_link_num=(num_of_rows-1+num_of_rows)*(num_of_rows-1)+num_of_rows-1
for i in range(0,total_link_num):
    tmp=link_item()
    link_set.append(tmp)

edge_1_2_route=[[5,'E'],[6,'S'],[10,'E']]#[0,20]
edge_1_3_route=[[5,'E'],[6,'N'],[2,'E']]#[0,30]
edge_3_4_route=[[3,'W'],[2,'S'],[6,'S'],[10,'S'],[14,'E']]#[end_time_3,end_time_3+20]

for i in edge_1_2_route:
    tmp_link=Get_link_index_by_route(i,num_of_rows)
    link_set[tmp_link].timeline.append([0,20])

T_1_3=computeContention(edge_1_3_route,link_set,num_of_rows,0,30)
Update_link_set(edge_1_3_route,link_set,num_of_rows,T_1_3,30+T_1_3)
start_time_of_3=30+T_1_3
print(computeContention(edge_3_4_route,link_set,num_of_rows,start_time_of_3,start_time_of_3+20))
"""

